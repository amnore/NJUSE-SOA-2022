/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package assignment;

import java.io.OutputStream;
import java.util.function.Consumer;
import java.util.function.Supplier;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.ServerConnector;
import org.eclipse.jetty.servlet.ServletHandler;

import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.xml.soap.MessageFactory;
import jakarta.xml.soap.SOAPConstants;
import lombok.SneakyThrows;

@WebServlet("/score")
public class App extends HttpServlet {
    private MessageFactory factory;

    @Override
    @SneakyThrows
    public void init() {
        factory = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
    }

    @Override
    @SneakyThrows
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) {
        var msg = factory.createMessage();
        var body = msg.getSOAPBody();
        var se = msg.getSOAPPart().getEnvelope();
        var reply = ((Supplier<Void>) () -> {
            try {
                msg.saveChanges();
                msg.writeTo(resp.getOutputStream());
            } catch (Exception e) {
                // ignore
            }
            return null;
        });

        se.addNamespaceDeclaration("", "http://www.jw.nju.edu.cn/schema");
        resp.setStatus(HttpServletResponse.SC_OK);
        resp.setHeader("Content-Type", "text/xml");

        var id = 0;
        if (req.getParameter("id") == null) {
            body.addFault(se.createQName("Receiver", "env"), "No parameter id");
            reply.get();
            return;
        }

        try {
            id = Integer.parseInt(req.getParameter("id"));
        } catch (Exception e) {
            body.addFault(se.createQName("Receiver", "env"), "invalid input id");
            reply.get();
            return;
        }

        var grades = Grades.scores.get(id);
        if (grades == null) {
            body.addFault(se.createQName("Receiver", "env"), "Student id not found");
            reply.get();
            return;
        }

        var list = body.addChildElement(se.createName("课程成绩列表"));
        for (var grade : grades) {
            var elem = list.addChildElement("课程成绩");
            elem.addAttribute(se.createName("成绩性质"), grade.type);
            elem.addAttribute(se.createName("课程编号"), grade.courseId.toString());
            var g = elem.addChildElement("成绩");
            g.addChildElement("学号").setTextContent(grade.id.toString());
            g.addChildElement("得分").setTextContent(grade.grade.toString());
        }
        reply.get();
    }

    @SneakyThrows
    public static void main(String[] args) {
        var server = new Server();
        var conn = new ServerConnector(server);
        conn.setPort(8080);
        server.setConnectors(new ServerConnector[] { conn });

        var handler = new ServletHandler();
        server.setHandler(handler);
        handler.addServletWithMapping(App.class, "/score/*");

        server.start();
    }
}
